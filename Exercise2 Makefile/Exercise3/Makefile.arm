SOURCES=main.cpp part1.cpp part2.cpp
OBJECTS=$(addprefix $(BUILD_DIR)/,$(SOURCES:.cpp=.o))
DEPS=$(addprefix $(BUILD_DIR)/,$(SOURCES:.cpp=.d))
EXE=$(addprefix ${BIN_DIR}/,prog)
CXXFLAGS=-I.
ARCH?=x86-64
# Making for x86-64 e.g. x86 -64 (the architecture employed) # > make ARCH=x86-
ifeq (${ARCH},x86-64)
CXX=g++
BUILD_DIR=build/x86-64
BIN_DIR=bin/x86-64
endif                   
# Making for architecture # > make ARCH=arm
ifeq (${ARCH},arm)
CXX=arm-rpizw-g++
BUILD_DIR=build/arm
BIN_DIR=bin/arm
endif
all:$(BIN_DIR)/$(EXE)
# %.cpp -> %.o needs to be added! Target is NOT just %.o...# Rule that describes how a .d (dependency)
$(BIN_DIR)/$(EXE): $(DEPS) $(OBJECTS) # << Check the $(DEPS) new dependency
	mkdir -p $(BIN_DIR)
	$(CXX) $(CXXFLAGS) -o $@ $(OBJECTS)
#file is created from a .cpp file  # Similar to the assigment that you just completed %.cpp -> %.o
$(BUILD_DIR)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@ 
$(BUILD_DIR)/%.d: %.cpp
	mkdir -p $(BUILD_DIR)
	$(CXX) -MT$@ -MM $(CXXFLAGS) $< > $@
	$(CXX) -MT$(@:.d=.o) -MM $(CXXFLAGS) $< >> $@
ifneq ($(filter -out clean format tidy,$(MAKECMDGOALS)),)
-include $(DEPS)
endif
clean:
	-rm -rf bin/
	-rm -rf build/
# /*ifneq ($(MAKECMDGOALS),clean)
# -include $(DEPS)
# endif*/
